<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.hhx.mybatis.dao.EmployeeDao">

    <!--
        eviction:回收策略如下eviction=“FIFO”：
            缓存回收策略：
                LRU – 最近最少使用的：移除最长时间不被使用的对象。
                FIFO – 先进先出：按对象进入缓存的顺序来移除它们。
                SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。
                WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。
                默认的是 LRU。
        flushInterval：
            清空缓存间隔，单位毫秒
            默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新
        readOnly：
            默认为false
            只读：true，mybatis认为从缓存中获取数据只读操作，mybatis会将缓存中的引用交给用户，不安全但是速度快
            非只读：false，mybatis认为缓存中的数据会被修改，mybatis会利用序列化&反序列化技术克隆一份给用户，安全但是速度慢
        size：
            引用数目，正整数
            代表缓存最多可以存储多少个对象，太大容易导致内存溢出
        type：
            自定义缓存的全类名，该类实现Cache接口

        true：
            只读缓存；会给所有调用者返回缓存对象的相同实例。因此这些对象
            不能被修改。这提供了很重要的性能优势。
        false：
            读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，
            但是安全，因此默认是 false。
        -->
<!--    <cache eviction="FIFO" flushInterval="600000" readOnly="false" size="1024"></cache>-->
    <cache type="org.mybatis.caches.ehcache.EhcacheCache"></cache>

    <resultMap id="myEmp" type="cn.hhx.mybatis.bean.Employee">
        <id column="id" property="id"/>
        <result column="employee_name" property="employeeName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
    </resultMap>

    <select id="getEmpById" resultMap="myEmp" useCache="true">
        select *
        from employee
        where id = #{id}
    </select>

    <insert id="addEmpById" flushCache="true">
        insert into employee(employee_name, gender, email)
        values (#{emp.employeeName}, #{emp.gender}, #{emp.email})
    </insert>
</mapper>